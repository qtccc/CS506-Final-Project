name: Python Flask App CI/CD

on:
  # Trigger the workflow on pushes and pull requests to the `main` branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the workflow

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up Python 3.12
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12  # Explicitly use Python 3.12

    # Step 3: Cache pip dependencies
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: .venv  # Cache the virtual environment directory
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python3.12 -m venv .venv  # Create a virtual environment using Python 3.12
        . .venv/bin/activate  # Activate the virtual environment
        pip install --upgrade pip  # Upgrade pip to the latest version
        pip install -r requirements.txt flake8 black  # Install project dependencies and linting tools

    # Step 5: Lint the code
    - name: Lint code
      run: |
        . .venv/bin/activate  # Activate the virtual environment
        flake8 --exclude .venv,build,dist,__pycache__  # Run flake8 to lint the code, excluding unnecessary directories

    # Step 6: Run unit tests
    - name: Run tests
      run: |
        . .venv/bin/activate  # Activate the virtual environment
        python -m unittest discover -s tests -p "test_*.py"  # Discover and run tests in the `tests` directory matching the pattern

    # Step 7: Test Flask server functionality
    - name: Test Flask server
      env:
        FLASK_APP: app.py  # Set the Flask app entry point
        FLASK_ENV: development  # Set the Flask environment to development
      run: |
        . .venv/bin/activate  # Activate the virtual environment
        flask run --host=0.0.0.0 --port=3000 &  # Start the Flask server on port 3000
        sleep 10  # Wait for the server to start
        curl -f http://127.0.0.1:3000/get_airports || exit 1  # Test the endpoint and fail if it doesn't respond

  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for deployment
    needs: build  # Deployment runs only if the `build` job is successful
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Deploy only on pushes to the `main` branch

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up Python 3.12
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12  # Explicitly use Python 3.12

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python3.12 -m venv .venv  # Create a virtual environment using Python 3.12
        . .venv/bin/activate  # Activate the virtual environment
        pip install --upgrade pip  # Upgrade pip to the latest version
        pip install -r requirements.txt  # Install project dependencies

    # Step 4: Deploy the Flask application
    - name: Deploy Flask App
      run: |
        echo "Custom deployment logic here"  # Placeholder for deployment commands
